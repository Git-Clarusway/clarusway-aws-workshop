AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template is created by modifying AWS CloudFormation Sample Template 
  ELBWithLockedDownAutoScaledInstances. It creates two Amazon EC2 instances fronted by 
  an Application Load Balancer with Auto Scaling Group and executes a flask based phone
  book application utilizing an RDS instance as db.
  The EC2 and DB instances and ELB are assigned to their specific security groups 
  allowing the instances to be accessible through the ELB URL only. DB instance is not
  publickly accessible and its sg gets traffic from the EC2 sg. The template works in
  Oregon and N.Virginia regions only.
  **WARNING** Free Tier eligible resources have been utilized, but you will be billed for 
  the AWS resources used if you create a stack from this template if you do not have 
  free tier access.
Metadata: {
    "Version": "v1.0",
    "Comments": "Generated by",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
      {
        "Label": { "default": "EC2 Instance Configuration" },
        "Parameters": ["InstanceType", "KeyName", "SSHLocation"]
      },
      {
        "Label": { "default": "RDS Instance Configuration" },
        "Parameters": ["DBUser", "DBPassword"]
      }
      ]
    }
  }
Parameters:
  InstanceType:
    Description: Please select an instance type. 
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Please select your key pair.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: Please specify a range for SSH connection.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DBUser:
    NoEcho: 'true'
    Description: Please enter a user name.
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Please enter a password.
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
Mappings:
  Regions:
    us-west-2: 
      'ImageId': ami-0e34e7b9ca0ace12d
    us-east-1:
      'ImageId': ami-09d95fab7fff3776c
  SubNets:
    us-east-1:
      'all': 
        - subnet-a19d23ec
        - subnet-280c3e16
        - subnet-0ece3b2f
        - subnet-db4ea1bd
        - subnet-e4fe15bb
        - subnet-91c4649f
    us-west-2:
      'all':
        - subnet-2a1ce252
        - subnet-844881d9
        - subnet-df5d4694
  DefaultVPC:
    us-east-1:
      'vpc': vpc-88ae95f2
    us-west-2:
      'vpc': vpc-46fa973e
Resources:
  MyDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName: phone_book
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      Engine: MySQL
      EngineVersion: 8.0.19
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: false
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !FindInMap 
        - SubNets
        - !Ref 'AWS::Region'
        - 'all'
      LaunchConfigurationName: !Ref LaunchConfig
      HealthCheckType: ELB
      HealthCheckGracePeriod: 90
      DesiredCapacity: '2'
      MinSize: '1'
      MaxSize: '3'
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:                
        -                        
          Key: Name
          PropagateAtLaunch: true
          Value: !Sub Web Server of ${AWS::StackName} Stack    
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      Comment: Install a simple application
      'AWS::CloudFormation::Init':
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+
                  - region=
                  - !Ref 'AWS::Region'
                  - |+
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+
                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
    Properties:
      ImageId: !FindInMap 
        - Regions
        - !Ref 'AWS::Region'
        - 'ImageId'
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install python3 -y
            pip3 install flask
            pip3 install flask_sqlalchemy
            pip3 install pymysql
            echo "mysql+pymysql://${DBUser}:${DBPassword}@${MyDB.Endpoint.Address}:${MyDB.Endpoint.Port}/phone_book" >> /RDS_URI
            wget ...
            wget -P templates ...
            wget -P templates ...
            wget -P templates ...
            python3 /app.py
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: !FindInMap 
        - SubNets
        - !Ref 'AWS::Region'
        - 'all'
      SecurityGroups: [!Ref ElbSecurityGroup]
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !FindInMap 
        - DefaultVPC
        - !Ref 'AWS::Region'
        - 'vpc'
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - ApplicationLoadBalancer
              - SecurityGroups
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      VpcId: !FindInMap 
        - DefaultVPC
        - !Ref 'AWS::Region'
        - 'vpc'
  ElbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on the inbound port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
      VpcId: !FindInMap 
        - DefaultVPC
        - !Ref 'AWS::Region'
        - 'vpc'
  DbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
      VpcId: !FindInMap 
        - DefaultVPC
        - !Ref 'AWS::Region'
        - 'vpc'
Outputs:
  URL:
    Description: URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName